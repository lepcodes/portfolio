---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import About from '../components/About.astro';
import Experience from '../components/Experience.astro';
import Education from '../components/Education.astro';
import Projects from '../components/Projects.astro';
import Chat from '../components/chatbot/Chat';
import NavBar from '../components/NavBar.astro';
import ChevronIcon from '../icons/ChevronIcon.astro';
---

<Layout>
  <NavBar />
  <div class="flex flex-col h-[calc(100vh-4rem)] gap-8 md:pt-18 md:h-screen">
    <Chat client:load/>
    <a class="fade-in-bounce flex flex-col justify-end items-center md:text-gray-500 text-sm font-bold hover:text-white" 
      href="#About"
      id="Explore">
      Explore Portfolio
      <ChevronIcon className='h-6 w-6 text-white'/>
    </a>
  </div>
  
  <div class="flex gap-22 px-10 md:px-22 justify-evenly w-full">
    <Header/>
    <main class="flex flex-col gap-24 md:max-w-[600px] md:w-[60%]">
      <About/>
      <Experience/>
      <Projects/>
      <Education/>
    </main>
  </div>
</Layout>

<script>
  const bgColor = '#002025';
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('header');
    const sections = document.querySelectorAll('section');
    const navLinks = document.querySelectorAll('nav a');
    const explore = document.querySelector('#Explore');

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          console.log(entry.target.id);
          navLinks.forEach((link) => {
            link.classList.toggle('active', link.getAttribute('href') === '#' + entry.target.id);
          });
        }
      });
    },
    {
      threshold: 0.1
    });

    sections.forEach((section) => {
      observer.observe(section);
    });
    
    const body = document.querySelector('body');
    window.addEventListener('scroll', () => {
      const scrollY = window.scrollY;

      if (scrollY > 20) {
        explore?.classList.remove('fade-in-bounce');
        explore?.classList.add('fade-out-bt');
      }
      if (scrollY === 0) {
        explore?.classList.remove('fade-out-bt');
        explore?.classList.add('fade-in-bounce');
      }

      if (body) {
        const lastMouseEvent = body.dataset.lastMouseEvent; // Store the last mouse event
        if (lastMouseEvent) {
          const e = JSON.parse(lastMouseEvent);
          const yPos = e.clientY + window.scrollY;
          body.style.background = `radial-gradient(circle at ${e.clientX}px ${yPos}px, #003631 0%, rgba(0,0,0,1) 500px)`;
        }
      }
    });
    
    document.addEventListener('mousemove', (e) => {
      console.log(window.scrollY);
      if (body) {
        body.style.background = `radial-gradient(circle at ${e.clientX}px ${e.clientY + window.scrollY}px, #003634 0%, rgba(0,0,0,1) 500px)`
      }
    });
    document.addEventListener('mousemove', (e) => {
      if (body) {
        body.dataset.lastMouseEvent = JSON.stringify({ clientX: e.clientX, clientY: e.clientY });
      }
    });
  });
</script>